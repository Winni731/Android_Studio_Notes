Changing the app bar color
-------------------------------------------
-------------------------------------------

app>res>values    --> open colors.xml

define colors, use <color> tag along with a name attribute as a reference when it's compiled into R.java.
The reference is available for use in XML layouts and also at runtime

app>res>values    --> styles.xml
<resources>
<!-- Base application theme. -->
<style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"> 
<!-- Customize your theme here. -->
<item name="colorPrimary">@color/colorPrimary</item>
<item name="colorPrimaryDark">@color/colorPrimaryDark</item> 
<item name="colorAccent">@color/colorAccent</item>
</style> 
</resources>

<item> tags define specific items within the app which adhere to a particular color that updated in colors.xml

app>res>layout    --> activity_main.xml
switch from Desgin to Text, update ConstraintLayout to change the background color

<android.support.constraint.ConstraintLayout
xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:background="@color/colorBackground"
tools:context="com.raywenderlich.timefighter.MainActivity">



Animations
-------------------------------------------
-------------------------------------------
right-click res --> New --> Android resource directory --> New Resource Directory window --> anim Resource type
right-click anim --> New --> Animation resource file

<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android"> 
</set>

Edit bounce.xml

<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android" 
android:fillAfter="true"
android:interpolator="@android:anim/bounce_interpolator"> 
<scale
android:duration="2000"
android:fromXScale="2.0"
android:fromYScale="2.0"
android:pivotX="50%"
android:pivotY="50%"
android:toXScale="1.0"
android:toYScale="1.0" /> 
</set>

<set xmlns:android="http://schemas.android.com/apk/res/android" 
android:fillAfter="true"
android:interpolator="@android:anim/bounce_interpolator">

fillAfter is true --> the animation won't reset the View to its original position once it's complete.

Interpolators affect the rate the entire animation is performed over time, independent of duraitions set within the transformations.

<scale
android:duration="2000"            --> 2000 milliseconds (2 seconds)
android:fromXScale="2.0"
android:fromYScale="2.0"
android:pivotX="50%"
android:pivotY="50%"
android:toXScale="1.0"
android:toYScale="1.0" />

to define animation:
1. scale the animated View to twice its size
2. shrink it back to its original size
3. do this over the space of two seconds
4. using a bouncing interpolator

modify tapMeButton.setOnClickListener callback in onCreate() in MainActivity.kt

tapMeButton.setOnClickListener { v ->
  val bounceAnimation = AnimationUtils.loadAnimation(this, 
      R.anim.bounce);
  v.startAnimation(bounceAnimation) 
  incrementScore()
}

every time you click the button, tapMeButton.setOnClickListener loads the bounce animation inside anim and instructs the button 
                                                                                                         to use that animation.


Adding a Dialog
-------------------------------------------
-------------------------------------------
